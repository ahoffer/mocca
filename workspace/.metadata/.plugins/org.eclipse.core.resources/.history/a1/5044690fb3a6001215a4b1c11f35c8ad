package weka.subspaceClusterer;

public class MoccaSubspace {

    private double[][] discrimObjs;
    private double[] lower;

    private int numFullspaceDims, numCongregatingDims;

    private boolean[] subspace;
    private double[] upper;
    private double width;
    public MoccaSubspace(double[][] discrimObjs, double width, int numDims) {
        this.discrimObjs = discrimObjs;
        this.width = width;
        this.numFullspaceDims = numDims;
        lower = new double[numDims];
        upper = new double[numDims];
    }

    public void eval() {

        double sheath = 0;

        /*
         * Create max and min values in each dimension from the discriminating set. Find the subspace and number of
         * congregating dimensions
         */
        double[] minimums = MoccaUtils.min(discrimObjs);
        double[] maximums = MoccaUtils.max(discrimObjs);
        double lengths[] = MoccaUtils.subtract(maximums, minimums);

        subspace = MoccaUtils.lessThanOrEqualTo(lengths, width);
        numCongregatingDims = MoccaUtils.countTrueValues(getSubspace());

        /*
         * If the entire subspace is zero, it means the discriminating set does not congregate in any dimension. The
         * trial has failed to find a cluster
         */
        if (numCongregatingDims > 0) {

            /*
             * Calculate upper and lower bounds of the hyper volume that surrounds the cluster.
             */

            for (int i = 0; i < numFullspaceDims; ++i) {

                sheath = width - lengths[i];
                lower[i] = minimums[i] - sheath;
                upper[i] = maximums[i] + sheath;

            }// for

        }// if
    }// method

    /**
     * @return the lower
     */
    public double[] getLower() {
        return lower.clone();
    }

    public int getNumCongregatingDims() {
        return numCongregatingDims;
    }

    public int getNumFullspaceDims() {
        return numFullspaceDims;
    }

    /**
     * @return the subspace
     */
    public boolean[] getSubspace() {

        return subspace.clone();
    }

    /**
     * @return the upper
     */
    double[] getUpper() {
        return upper.clone();
    }

}
