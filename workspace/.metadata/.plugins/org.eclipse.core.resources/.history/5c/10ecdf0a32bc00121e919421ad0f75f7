package weka.filters;

import Jama.Matrix;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;
import weka.subspaceClusterer.MatrixUtils;
import weka.subspaceClusterer.MoccaUtils;

public class Rotate extends SimpleBatchFilter {
    @Override
    public String getRevision() {
        // TODO Auto-generated method stub
        return "A";
    }

    @Override
    protected Instances determineOutputFormat(Instances arg0) throws Exception {
        return getOutputFormat();
    }

    @Override
    protected Instances process(Instances arg0) throws Exception {
        double angle = Math.PI / 4;
        Matrix rotMat = new Matrix(2, 2);
        rotMat.set(0, 0, Math.cos(angle));
        rotMat.set(0, 1, -1 * Math.sin(angle));
        rotMat.set(1, 0, Math.sin(angle));
        rotMat.set(1, 1, Math.cos(angle));
        return MatrixUtils.toInstances(getOutputFormat(), rotMat.times(MatrixUtils.toMatrix(arg0)));
    }

    @Override
    public String globalInfo() {
        return "return rotate some points in 2D space";
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        String filename = "C:\\Users\\ahoffer\\Desktop\\test.csv";
        DataSource source = null;
        Instances i = null;
        Rotate r = new Rotate();
        MoccaUtils.testFileReadable(filename);
        try {
            source = new DataSource(filename);
            i = source.getDataSet();
            r.setInputFormat(i);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }// method
}
