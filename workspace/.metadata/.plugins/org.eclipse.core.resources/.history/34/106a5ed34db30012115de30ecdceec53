package weka.subspaceClusterer;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import weka.core.Instances;

public class Out {

    // PRECONDITION: Class attribute must be integer, or a double that can be cast to an integer.
    public static StringBuffer getTrueInfo(Instances data) {

        StringBuffer sb = new StringBuffer();

        if (!MoccaUtils.hasClassAttribute(data)) {
            System.err.printf("Out.print() error. Instance has no class attribute.\n");
            System.exit(-6);
        }

        Instances copy = new Instances(data);
        int numDims = MoccaUtils.numDims(data);
        int numObjects;

        sb.append(copy.relationName() + " TRUE\n");

        for (int classValue = 0; classValue < copy.numClasses(); ++classValue) {

            // Write the subspace for the hidden cluster
            for (int d = 0; d < numDims; ++d) {
                sb.append("1 ");
            }// for subspace loop

            // Write the cardinality
            numObjects = data.numDistinctValues(data.classAttribute());
            sb.append(numObjects);
            sb.append(" ");

            // Write the objects
            for (int objIdx = 0; objIdx < copy.numInstances(); ++objIdx) {

                if (classValue == (int) copy.instance(objIdx).classValue()) {
                    sb.append(objIdx);
                    sb.append(" ");
                }// if

            }// for object index

            // End this cluster
            // Erase last space
            MoccaUtils.backspace(sb);
            // Insert newline
            sb.append("\n");

        } // for class value

        return sb;

    }// method

    public static void getTrueFile(String filename, Instances data) {

        PrintWriter pw = null;

        try {

            pw = new PrintWriter(new FileWriter(filename));
            pw.print(getTrueInfo(data));
            pw.flush();
        }

        catch (IOException e) {
            e.printStackTrace();
        } finally {

            // Close the PrintWriter
            if (pw != null)
                pw.close();

        }

    }// method

} // class
