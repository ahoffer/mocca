package weka.subspaceClusterer;

import java.util.ArrayList;
import java.util.List;

public class MoccaBuilder {

    public static void main(String[] args) {

    }

    /*
     * TODO: Turn all the instance variables into a hashmap. Then create a superclass that iterates over the table to
     * build the parameter string.
     */

    static double[] gammas = { 0.0, 0.5, 0.1, 0.5, 1.0 };
    static double[] alphas = { 0.1 };
    static double[] widths = { 0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 1.0 };
    static double[] betas = { 0.1, 0.35, 0.5 };
    static double[] epsilons = { 0.05 };
    static double[] subspaceOverlapThresholds = { 0.95, 0.95 };
    static double[] objectOverlapThresholds = { 0.8, 0.9, 0.95, 0.99 };
    static int maxiter = 10000;
    static String subspaceClutererName = "Mocca";

    public static List<String> getArgLines() {
    
        String args;
        ArrayList<String> argLines = new ArrayList<String>();
    
        for (double e : epsilons) {
            for (double a : alphas) {
                for (double b : betas) {
                    for (double s : subspaceOverlapThresholds) {
                        for (double i : objectOverlapThresholds) {
                            for (double g : gammas) {
                                for (double w : widths) {
    
                                    args = String.format(
                                            "-sc %s -a %3e -b %3e -e %3e -g %3e -i %3e -s %3e -w %3e -maxiter %d",
                                            subspaceClutererName, a, b, e, g, i, s, w, maxiter);
                                    argLines.add(args);
    
                                }
                            }
                        }
                    }
                }
            }
        }
    
        return (List<String>) argLines;
    }

}// class
