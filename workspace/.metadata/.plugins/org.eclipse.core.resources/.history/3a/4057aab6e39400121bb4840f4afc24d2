package weka.subspaceClusterer;

import java.util.List;

import i9.subspace.base.Cluster;

public class MoccaCluster extends Cluster {

	private static final long serialVersionUID = 1L;
	double quality;
	int cardinality;

	/*-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----*/

	public MoccaCluster(boolean[] subspace, List<Integer> objects, double quality) {
		super(subspace, objects);
		this.quality = quality;
		cardinality = objects.size();
	}

	/*-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----*/

	@Override
	public String toStringWeka() {
		// TODO Auto-generated method stub
		return String.format("%,4.2f", quality) + " " + (super.toStringWeka());
	}// end method

	/*-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----*/

	public double normalizedOverlapWith(MoccaCluster otherCluster) {
		int overlap, smallerCardinality;
		double normalizedOverlap;
		overlap = MoccaUtils.intersection(m_objects, otherCluster.m_objects);
		smallerCardinality = Math.min(cardinality, otherCluster.cardinality);
		normalizedOverlap = overlap / smallerCardinality;
		return normalizedOverlap;
	}

}// end class
