package weka.subspaceClusterer;

import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

import weka.subspaceClusterer.PCA.PrincipleComponent;
import Jama.EigenvalueDecomposition;
import Jama.Matrix;

public class PCA2 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		double[][] matrix = new double[][] { { 2.5, 2.4 }, { 0.5, 0.7 },
				{ 2.2, 2.9 }, { 1.9, 2.2 }, { 3.1, 3.0 }, { 2.3, 2.7 },
				{ 2, 1.6 }, { 1, 1.1 }, { 1.5, 1.6 }, { 1.1, 0.9 } };
		Matrix originalData = new Matrix(matrix);
		PCA2 pca = PCA2(matrix);
		int numComponents = pca.getNumComponents();
		System.out.println("There are " + numComponents + " components");
		List<PrincipleComponent> mainComponents = pca.getDominantComponents(numComponents);

	}//end main

	//Instance variables
	Matrix covMatrix;
	EigenvalueDecomposition eigenstuff;
	double[] eigenvalues;
	Matrix eigenvectors;
	SortedSet<PrincipleComponent> principleComponents;
	double[] means;

	
	//Constructor
	public PCA(double[][] input) {
		means = new double[input[0].length];
		double[][] cov = getCovariance(input, means);
		covMatrix = new Matrix(cov);
		eigenstuff = covMatrix.eig();
		eigenvalues = eigenstuff.getRealEigenvalues();
		eigenvectors = eigenstuff.getV();
		double[][] vecs = eigenvectors.getArray();
		int numComponents = eigenvectors.getColumnDimension(); // same as num
																// rows.
		principleComponents = new TreeSet<PrincipleComponent>();
		for (int i = 0; i < numComponents; i++) {
			double[] eigenvector = new double[numComponents];
			for (int j = 0; j < numComponents; j++) {
				eigenvector[j] = vecs[i][j];
			}
			principleComponents.add(new PrincipleComponent(eigenvalues[i],
					eigenvector));
		}
	}
}//end class
