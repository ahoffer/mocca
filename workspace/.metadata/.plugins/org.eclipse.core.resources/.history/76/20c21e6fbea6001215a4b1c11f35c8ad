package weka.subspaceClusterer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MoccaBuilder {

    /**
     * @param args
     */
    public static void main(String[] args) {

    }

    /*
     * TODO: Turn all the instance variables into a hashmap. Then create a superclass that iterates over the table to
     * build the parameter string.
     */

    static double gamma, beta, epsilon, subspaceOverlapThreshold, objectOverlapThreshold;
    static double[] gammas = { 0.0, 0.5, 0.1, 0.5, 1.0 };
    static double[] alphas = { 0.1 };
    static double[] widths = { 0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 1.0 };
    static double[] betas = { 0.1, 0.35, 0.5 };
    static double[] epsilons = { 0.05 };
    static double[] subspaceOverlapThresholds = { 0.95, 0.95 };
    static double[] objectOverlapThresholds = { 0.8, 0.9, 0.95, 0.99 };
    static int maxiter = 10000;
    static String subspaceClutererName = "Mocca";

    public static List<String> run() {

        ArrayList<String> args = new ArrayList<String>();

        for (double e : epsilons) {
            for (double a : alphas) {
                for (double b : betas) {
                    for (double s : subspaceOverlapThresholds) {
                        for (double i : objectOverlapThresholds) {
                            for (double g : gammas) {
                                for (double w : width) {

                                }
                            }

                        }

                    }
                }
            }

            for (int oStep = 0; oStep <= oSteps; oStep++) {
                objectOverlapThreshold = oStep / ((double) oSteps);
                alpha = 0;

                for (int alphaStep = 0; alphaStep <= alphaSteps; alphaStep++) {
                    alpha = alpha + 0.1;
                    beta = 0;

                    for (int betaStep = 0; betaStep <= betaSteps; betaStep++) {
                        beta = beta + 0.1;
                        gamma = 0;

                        for (int gammaStep = 0; gammaStep <= gammaSteps; gammaStep++) {
                            gamma = gammaStep / ((double) gammaSteps);
                            width = .05;
                            for (int widthStep = 0; widthStep <= widthSteps; widthStep++) {
                                width = width + 0.5 * widthStep;

                                String argString = String
                                        .format("-label %d -M %s -sc %s -t %s -a %f -b %f -e %f -g %f -i %f -s %f -w %f -maxiter %d -path %s -c last",
                                                experimentLabel, metrics, subspaceClutererName, dataSetFilename, alpha,
                                                beta, epsilon, gamma, objectOverlapThreshold, subspaceOverlapThreshold,
                                                width, maxiter, outputPath);
                            }
                        }
                    }
                }
            }
        }
    }// method

}
