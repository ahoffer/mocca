package weka.subspaceClusterer;

import java.util.ArrayList;
import java.util.Arrays;

public class MoccaBuilder {

    /**
     * @param args
     */
    public static void main(String[] args) {

    }

    
    double gamma, beta, epsilon, subspaceOverlapThreshold, objectOverlapThreshold;
   double[] gammas = {0.0, 0.5, 0.1, 0.5, 1.0};
   double[] alphas = { 0.1 };
   double[] widths = {0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 1.0};
   double[] betas = {0.1, 0.35, 0.5};
   double[] epsilsons = {0.05};
   
   
/*TODO: Turn these instance variables into a hashmap. Then create a superclass that iterates over the table to build the parameter string.*/
    maxiter = 10000;
    epsilon = 0.05;
    subspaceClutererName = "Mocca";

    for (int sStep = 0; sStep <= sSteps; sStep++) {
        subspaceOverlapThreshold = sStep / ((double) sSteps);

        for (int oStep = 0; oStep <= oSteps; oStep++) {
            objectOverlapThreshold = oStep / ((double) oSteps);
            alpha = 0;

            for (int alphaStep = 0; alphaStep <= alphaSteps; alphaStep++) {
                alpha = alpha + 0.1;
                beta = 0;

                for (int betaStep = 0; betaStep <= betaSteps; betaStep++) {
                    beta = beta + 0.1;
                    gamma = 0;

                    for (int gammaStep = 0; gammaStep <= gammaSteps; gammaStep++) {
                        gamma = gammaStep / ((double) gammaSteps);
                        width = .05;
                        for (int widthStep = 0; widthStep <= widthSteps; widthStep++) {
                            width = width + 0.5 * widthStep;

                            String argString = String
                                    .format("-label %d -M %s -sc %s -t %s -a %f -b %f -e %f -g %f -i %f -s %f -w %f -maxiter %d -path %s -c last",
                                            experimentLabel, metrics, subspaceClutererName, dataSetFilename, alpha,
                                            beta, epsilon, gamma, objectOverlapThreshold, subspaceOverlapThreshold,
                                            width, maxiter, outputPath);

                            // DEBUG - Do not delete the next line. It is handy for debugging.
                            // System.out.println(args);

                            ArrayList<String> commands = new ArrayList<String>();
                            commands.add("javaw.exe");
                            commands.add("-cp");
                            commands.add("\\Users\\ahoffer\\Documents\\GitHub\\sepc\\workspace\\OpenSubspace\\lib\\*;");
                            commands.add("weka.subspaceClusterer.MySubspaceClusterEvaluation");

                            /*
                             * TODO: Splitting the command line by spaces is a hack. This will BREAK if there are
                             * spaces in the filenames or paths
                             */
                            String[] args = argString.split(" ");
                            commands.addAll(Arrays.asList(args));
                            // System.err.println(experimentLabel);
                            // System.err.println(argString);
                            dispatch(commands);

                            experimentLabel++;
                        }
                    }
                }
            }
        }
    }
}// method
    
    
}
