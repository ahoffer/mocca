package weka.subspaceClusterer;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import Jama.Matrix;

import weka.core.Instances;
import weka.filters.Filter;

public class StatUtils {

	// Instance variables
	weka.filters.unsupervised.instance.Resample sampler;
	Random random;

	public static double one = 0.99999;

	// Set loop invariants
	public StatUtils(int seed, Instances data) throws Exception {
		sampler = new weka.filters.unsupervised.instance.Resample();
		sampler.setRandomSeed(seed); // Make successive runs repeatable.
		sampler.setInputFormat(data);
		sampler.setNoReplacement(true);
		random = new Random(seed);
	}

	public Instances subSampleAmount(Instances dataSet, int num) {
		Instances shuffleCopy = new Instances(dataSet);
		shuffleCopy.randomize(random);
		return new Instances(dataSet, 0, num);
	} // end

	public Instances subSamplePercentage(Instances dataSet, double percentage)
			throws Exception {

		if (percentage >= one) {
			return new Instances(dataSet);
		}

		sampler.setSampleSizePercent(percentage);
		return Filter.useFilter(dataSet, sampler);
	}// end method

	// Return the largest value from each column
	public static Matrix min(Matrix input) {
		int cols = input.getColumnDimension();
		Matrix mins = new Matrix(1, cols);
		double smallest, val;
		for (int j = 0; j < cols; ++j) {
			smallest = Double.POSITIVE_INFINITY;
			for (int i = 0; i < input.getRowDimension(); ++i) {
				val = input.get(i, j);
				if (val < smallest) {
					smallest = val;
				}// end if
				mins.set(0, j, smallest);
			}// end for
		}// end for
		return mins;
	}// end method

	// Return the largest value from each column
	public static Matrix max(Matrix input) {
		int cols = input.getColumnDimension();
		Matrix maxs = new Matrix(1, cols);
		double largest, val;
		for (int j = 0; j < cols; ++j) {
			largest = Double.NEGATIVE_INFINITY;
			for (int i = 0; i < input.getRowDimension(); ++i) {
				val = input.get(i, j);
				if (val > largest) {
					largest = val;
				}// end if
				maxs.set(0, j, largest);
			}// end for
		}// end for
		return maxs;
	}// end method

	public List<Integer> sampleWithoutReplacement(List<Integer> list, int size) {
		ArrayList<Integer> listCopy = (ArrayList<Integer>) list.clone();
		return listCopy
	
	}

}// end class
