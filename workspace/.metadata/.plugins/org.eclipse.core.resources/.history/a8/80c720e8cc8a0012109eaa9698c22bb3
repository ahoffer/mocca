package weka.subspaceClusterer;

import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Center;
import weka.filters.unsupervised.attribute.Remove;

import weka.core.Instances;
import weka.subspaceClusterer.PCA.PrincipleComponent;
import Jama.EigenvalueDecomposition;
import Jama.Matrix;

public class PCA2 {

//	Instances removeClassAttribute(Instances input) throws Exception {
//
//		int classIdx = input.classIndex();
//		if (classIdx >= 0) {
//			// get rid of the class column
//
//			int[] todelete = new int[1];
//			todelete[0] = classIdx;
//			Remove removeFilter = new Remove();
//			removeFilter.setAttributeIndicesArray(todelete);
//			removeFilter.setInvertSelection(false);
//			removeFilter.setInputFormat(input);
//			return Filter.useFilter(input, removeFilter);
//		} else {
//			return input;
//		}
//	}// end method


	// Instance variables
	Matrix covMatrix;
	EigenvalueDecomposition eigenstuff;
	double[] eigenvalues;
	Matrix eigenvectors;
	SortedSet<PrincipleComponent> principleComponents;
	double[] means;
	public Instances output;

	// Constructor
	public PCA2(Instances input) throws Exception {
		 output=center(input);
	}

//	public PCA(double[][] input) {
//		means = new double[input[0].length];
//		double[][] cov = getCovariance(input, means);
//		covMatrix = new Matrix(cov);
//		eigenstuff = covMatrix.eig();
//		eigenvalues = eigenstuff.getRealEigenvalues();
//		eigenvectors = eigenstuff.getV();
//		double[][] vecs = eigenvectors.getArray();
//		int numComponents = eigenvectors.getColumnDimension(); // same as num
//																// rows.
//		principleComponents = new TreeSet<PrincipleComponent>();
//		for (int i = 0; i < numComponents; i++) {
//			double[] eigenvector = new double[numComponents];
//			for (int j = 0; j < numComponents; j++) {
//				eigenvector[j] = vecs[i][j];
//			}
//			principleComponents.add(new PrincipleComponent(eigenvalues[i],
//					eigenvector));
//		}
//	}// end method

	
	public Instances center(Instances input) throws Exception {
		Center filter = new Center();
		filter.setInputFormat(input);
		return Filter.useFilter(input, filter);


	}
	
	
	
}// end class
